{"version":3,"sources":["features/auth/validators.js","features/sendsayconnector/sendsayconnector.js","features/auth/authSlice.js","features/loginform/LoginForm.js","features/history/isEqualObject.js","features/history/indexedDBConnector.js","features/history/historySlice.js","features/confirm/confirmSlice.js","features/fullscreen/fullscreenSlice.js","features/requests/requestsSlice.js","features/mainform/CurrentAccount.js","features/mainform/Header.js","features/mainform/HistoryItem.js","features/mainform/History.js","features/mainform/TextMemo.js","features/mainform/Viewer.js","features/mainform/Footer.js","features/mainform/Popup.js","features/mainform/ConfirmDialog.js","features/mainform/MainForm.js","AppRoute.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["isLoginValid","loginName","isEmail","RegExp","test","String","toLowerCase","isCorrectStr","sendsayConnector","this","sendsay","Sendsay","loginParams","login","sublogin","subLoginName","password","obj","request","sessionName","setSession","action","localStorage","getItem","authSlice","createSlice","name","initialState","currentLoginName","currentSubLoginName","process","errMessage","isPasswordValid","reducers","correctLogin","state","payload","setItem","logout","removeItem","setProcessState","setLoginPasswordValidState","resetFailState","actions","connect","authProcess","auth","loginAttempt","dispatch","a","isLoginValidResult","isPasswordValidResult","res","session","id","explain","JSON","stringify","props","loginButtonStateClass","useState","setLoginName","setSubLoginName","setPassword","onLoginHandle","onKeyUpHandle","key","loginMenuErrmessageHide","loginHelpHide","loginLabelInvalid","loginInputInvalid","passwordHelpHide","passwordLabelInvalid","passwordInputInvalid","className","type","placeholder","data-testid","required","onChange","e","target","value","onKeyUp","onClick","disabled","indexOf","href","ghLink","isObject","object","isEqual","object1","object2","keys1","Object","keys","keys2","length","val1","val2","areObjects","indexedDatabase","openDatabase","Promise","resolve","reject","openDB","indexedDB","open","onupgradeneeded","db","result","objectStoreNames","contains","createObjectStore","onerror","Error","onsuccess","updateDatabase","historyItems","history","transaction","objectStore","clear","forEach","item","index","put","console","log","getHistory","getAll","updateHistoryItems","successStatus","historyItem","status","timestamp","Date","now","findIndex","push","checkDuplicateItem","sort","b","sortItems","overCount","splice","checkMaxSize","historySlice","popupedItem","copyAnimatedItem","addSuccessHistoryItem","addFailHistoryItem","setHistory","parse","err","removeHistoryItem","deleteItemIndex","clearHistory","openPopup","parseInt","slice","closePopup","setCopyAnimatedItem","resetCopyAnimatedItem","confirmSlice","showConfirm","confirmCaption","confirmApplyAction","confirmParams","tst","openConfirm","closeConfirm","fullscreenSlice","fullscreenTrigger","fullscreen","setFullscreenTrigger","resetFullscreenTrigger","setFullscreen","requestsSlice","requestStr","responseStr","setRequestStr","setResponseStr","responseObj","clearRequests","formatRequest","formatJSON","sendRequest","message","error","subloginSeparatorHide","fullscreenClass","document","onfullscreenchange","event","copyAnimateClass","itemIndex","stopPropagation","restoreHistory","useEffect","onWheel","window","delta","Math","max","min","wheelDelta","detail","getElementById","scrollLeft","map","requests","textMemoProps","sideClass","caption","readOnly","viewerClass","captionClass","currentRequest","undefined","Viewer","percentage","primaryMinSize","secondaryMinSize","requestButtonStateClass","resetCopyAnimated","setTimeout","popupClass","getRequestStr","onCopyClickHandle","navigator","clipboard","writeText","style","left","popupX","getBoundingClientRect","right","getLeft","width","confirm","executeAction","buttonYes","focus","confirmDialogClass","closeFullscreen","openFullScreen","elem","documentElement","requestFullscreen","webkitRequestFullscreen","msRequestFullscreen","exitFullscreen","webkitExitFullscreen","msExitFullscreen","onKeyDown","to","App","gitHubLink","path","configureStore","reducer","authReducer","requestsReducer","historyReducer","confirmReducer","fullscreenReducer","Boolean","location","hostname","match","ReactDOM","render","StrictMode","store","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.82cd20fe.chunk.js","sourcesContent":["export const isLoginValid = (loginName) => {\r\n  // email regexp has taken from stackoverflow.com (c)\r\n  // link: https://stackoverflow.com/questions/46155/how-to-validate-an-email-address-in-javascript\r\n  const emailRegExp = new RegExp(/^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/);\r\n  const isEmail = emailRegExp.test(String(loginName).toLowerCase());\r\n\r\n  const correctStrRegExp = new RegExp(/^([a-zA-Z0-9_])+$/);\r\n  const isCorrectStr = correctStrRegExp.test(String(loginName));\r\n  return isEmail || isCorrectStr;\r\n}\r\n\r\nexport const isPasswordValid = (password) => {\r\n  const correctPassRegExp = new RegExp(/^([a-zA-Z0-9 ,.!@#$%^&()/*\\-+\\\\\"'|{}`;:?<>_=[\\]~])+$/);\r\n  return correctPassRegExp.test(String(password));\r\n}\r\n","import Sendsay from 'sendsay-api';\r\n\r\nclass SendsayConnector{\r\n  constructor(){\r\n    this.sendsay = new Sendsay();\r\n  }\r\n  login(loginParams){\r\n    return this.sendsay.login({\r\n      login: loginParams.loginName,\r\n      sublogin: loginParams.subLoginName,\r\n      password: loginParams.password,\r\n    });\r\n  }\r\n  request(obj){\r\n    return this.sendsay.request(obj);\r\n  }\r\n  setSession(sessionName){\r\n    this.sendsay.setSession(sessionName);\r\n  }\r\n  logout(){\r\n    return this.sendsay.request({ action: 'logout'});\r\n  }\r\n}\r\n\r\nexport const sendsayConnector = new SendsayConnector();\r\n","import { createSlice } from '@reduxjs/toolkit';\r\nimport { isLoginValid, isPasswordValid } from './validators.js'\r\nimport { sendsayConnector } from '../sendsayconnector/sendsayconnector.js'\r\n\r\nsendsayConnector.setSession(localStorage.getItem(\"sendsay_session\"));\r\n\r\nexport const authSlice = createSlice({\r\n  name: 'auth',\r\n  initialState: {\r\n    currentLoginName: localStorage.getItem(\"loginName\"),\r\n    currentSubLoginName: localStorage.getItem(\"subLoginName\"),\r\n    process: 'none',\r\n    errMessage: '',\r\n    isLoginValid: true,\r\n    isPasswordValid: true,\r\n  },\r\n  reducers: {\r\n    correctLogin: (state, action) => {\r\n      state.currentLoginName = action.payload.loginName;\r\n      state.currentSubLoginName = action.payload.subLoginName;\r\n      localStorage.setItem(\"loginName\",state.currentLoginName);\r\n      localStorage.setItem(\"subLoginName\",state.currentSubLoginName);\r\n    },\r\n    logout: state => {\r\n      localStorage.removeItem(\"loginName\");\r\n      localStorage.removeItem(\"subLoginName\");\r\n      localStorage.removeItem(\"sendsay_session\");\r\n      state.currentLoginName = state.currentSubLoginName = null;\r\n    },\r\n    setProcessState: (state, action) => {\r\n      state.process = action.payload.process;\r\n      state.errMessage = action.payload.errMessage;\r\n    },\r\n    setLoginPasswordValidState: (state, action) => {\r\n      state.isLoginValid = action.payload.isLoginValid;\r\n      state.isPasswordValid = action.payload.isPasswordValid;\r\n    },\r\n    resetFailState: state => {\r\n      state.process = \"none\";\r\n    }\r\n  },\r\n});\r\n\r\nexport const { correctLogin, logout, setProcessState, setLoginPasswordValidState, resetFailState } = authSlice.actions;\r\n\r\nexport const loginAttempt = loginParams => dispatch => {\r\n  (async (loginParams) => {\r\n    dispatch(setProcessState({process:'waiting'}));\r\n    let isLoginValidResult = isLoginValid(loginParams.loginName);\r\n    let isPasswordValidResult = isPasswordValid(loginParams.password);\r\n    dispatch(setLoginPasswordValidState({isLoginValid:isLoginValidResult, isPasswordValid:isPasswordValidResult}));\r\n    if(!(isLoginValidResult && isPasswordValidResult)){\r\n      dispatch(setProcessState({process:'authinvalid'}));\r\n      return;\r\n    }\r\n    try{\r\n      let res = await sendsayConnector.login(loginParams);\r\n      if(res.session) localStorage.setItem(\"sendsay_session\",res.session);\r\n      dispatch(setProcessState({process:'none'}));\r\n      dispatch(correctLogin(loginParams));\r\n    }catch(err) {\r\n      let errMessage = {};\r\n      errMessage.id = err.id;\r\n      errMessage.explain = err.explain;\r\n      dispatch(setProcessState({process:'loginfail', errMessage:JSON.stringify(errMessage)}));\r\n    }\r\n  })(loginParams);\r\n};\r\n\r\nexport default authSlice.reducer;\r\n","import React, {useState} from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { loginAttempt, resetFailState } from '../auth/authSlice';\r\nimport './LoginForm.css';\r\n\r\nconst LoginForm = (props) => {\r\n\r\n      const [loginName, setLoginName] = useState(\"cooleshov@inbox.ru\");\r\n      const [subLoginName, setSubLoginName] = useState(\"\");\r\n      const [password, setPassword] = useState(\"pu2Robusoo\");\r\n\r\n      const onChangeLoginName = (e) => {\r\n        setLoginName(e.target.value);\r\n        props.resetFailState();\r\n      }\r\n      const onChangePassword = (e) => {\r\n        setPassword(e.target.value);\r\n        props.resetFailState();\r\n      }\r\n      const onLoginHandle = () => {\r\n        props.loginAttempt({loginName, subLoginName, password});\r\n      }\r\n      const onKeyUpHandle = ({key}) => {\r\n        if (key === \"Enter\") onLoginHandle();\r\n      }\r\n\r\n      const loginMenuErrmessageHide = props.authProcess === \"loginfail\" ? \"\" : \"login-menu-errmessage_hide\";\r\n\r\n      const loginHelpHide = props.isLoginValid ? \"login-menu-item__help_hide\" : \"\";\r\n      const loginLabelInvalid = props.isLoginValid ? \"\" : \"login-menu-item__label_invalid\";\r\n      const loginInputInvalid = props.isLoginValid ? \"\" : \"login-menu-item__input_invalid\";\r\n\r\n      const passwordHelpHide = props.isPasswordValid ? \"login-menu-item__help_hide\" : \"\";\r\n      const passwordLabelInvalid = props.isPasswordValid ? \"\" : \"login-menu-item__label_invalid\";\r\n      const passwordInputInvalid = props.isPasswordValid ? \"\" : \"login-menu-item__input_invalid\";\r\n\r\n      let loginButtonStateClass;\r\n      switch (props.authProcess) {\r\n        case \"none\":\r\n          loginButtonStateClass = \"\";\r\n        break;\r\n        case \"waiting\":\r\n          loginButtonStateClass = \"login-menu-loginbutton_waiting\";\r\n        break;\r\n        case \"authinvalid\":\r\n          loginButtonStateClass = \"login-menu-loginbutton_disabled\";\r\n        break;\r\n        default:\r\n          loginButtonStateClass = \"\";\r\n      }\r\n\r\n      return(\r\n        <div className=\"login\">\r\n          <div className=\"app-logo-container\">\r\n            <div className=\"app-logo\"></div>\r\n          </div>\r\n          <div className=\"login-menu\">\r\n            <div className=\"app-caption\">API-консолька</div>\r\n            <div className={`login-menu-errmessage ${loginMenuErrmessageHide}`}>\r\n              <div className=\"login-menu-errmessage__smile\"></div>\r\n              <div className=\"login-menu-errmessage__textcontainer\">\r\n                <div>Вход не вышел</div>\r\n                <div className=\"login-menu-errmessage__text\">{props.errMessage}</div>\r\n              </div>\r\n            </div>\r\n            <div className={`login-menu-item__help ${loginHelpHide}`}>\r\n              Логином может быть email, либо строка из латинских букв, цифр и подчеркиваний\r\n            </div>\r\n            <div className={`login-menu-item__label ${loginLabelInvalid}`}>Логин</div>\r\n            <input\r\n              className={`login-menu-item__input ${loginInputInvalid}`}\r\n              type=\"text\"\r\n              placeholder=\"iamyourlogin@domain.xyz\"\r\n              data-testid=\"loginInput\"\r\n              required\r\n              onChange={onChangeLoginName}\r\n              onKeyUp={onKeyUpHandle}\r\n            />\r\n            <div className=\"login-menu-item-labelcontainer\">\r\n              <div className=\"login-menu-item__label\">Сублогин</div>\r\n              <div className=\"login-menu-item__optionlabel\"><span>Опционально</span></div>\r\n            </div>\r\n            <input\r\n              className=\"login-menu-item__input\"\r\n              type=\"text\"\r\n              placeholder=\"sublogin-could-be-here\"\r\n              data-testid=\"subLoginInput\"\r\n              onChange={e => setSubLoginName(e.target.value)}\r\n              onKeyUp={onKeyUpHandle}\r\n            />\r\n            <div className={`login-menu-item__help ${passwordHelpHide}`}>\r\n              Пароль может содержать только латинские буквы, цифры, символы и пробел\r\n            </div>\r\n            <div className={`login-menu-item__label ${passwordLabelInvalid}`}>Пароль</div>\r\n            <input\r\n              className={`login-menu-item__input ${passwordInputInvalid}`}\r\n              type=\"password\"\r\n              data-testid=\"passwordInput\"\r\n              required\r\n              onChange={onChangePassword}\r\n              onKeyUp={onKeyUpHandle}\r\n            />\r\n            <div className=\"login-menu-loginbutton-container\">\r\n              <button\r\n                className={`login-menu-loginbutton ${loginButtonStateClass}`}\r\n                type=\"button\"\r\n                onClick={onLoginHandle}\r\n                data-testid=\"submitButton\"\r\n                disabled={[\"none\",\"loginfail\"].indexOf(props.authProcess) === -1}>\r\n                Войти\r\n              </button>\r\n            </div>\r\n          </div>\r\n          <a className=\"github-link\" href={props.ghLink}>@my-github-link</a>\r\n        </div>\r\n      )\r\n\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  const authProcess = state.auth.process;\r\n  const errMessage = state.auth.errMessage;\r\n  const isLoginValid = state.auth.isLoginValid;\r\n  const isPasswordValid = state.auth.isPasswordValid;\r\n  return {authProcess, errMessage, isLoginValid, isPasswordValid}\r\n}\r\n\r\nexport default connect(mapStateToProps,{loginAttempt, resetFailState})(LoginForm);\r\n","const isEqual = (object1, object2) => {\r\n\r\n  const keys1 = Object.keys(object1);\r\n  const keys2 = Object.keys(object2);\r\n\r\n  if(keys1.length !== keys2.length) {\r\n    return false;\r\n  }\r\n\r\n  for(const key of keys1){\r\n    const val1 = object1[key];\r\n    const val2 = object2[key];\r\n    const areObjects = isObject(val1) && isObject(val2);\r\n    if ((areObjects && !isEqual(val1, val2)) || (!areObjects && (val1 !== val2))){\r\n      return false;\r\n    }\r\n  }\r\n\r\n  return true;\r\n\r\n}\r\n\r\nconst isObject = (object) => {\r\n  return object != null && typeof object === 'object';\r\n}\r\n\r\nexport default isEqual;\r\n","class IndexedDatabase{\r\n  constructor(){\r\n    this.db = null;\r\n  }\r\n  openDatabase = () => {\r\n    return new Promise((resolve, reject) => {\r\n      const openDB = indexedDB.open(\"sendsay\");\r\n      openDB.onupgradeneeded = () => {\r\n        this.db = openDB.result;\r\n        if (!this.db.objectStoreNames.contains(\"history\")){\r\n          this.db.createObjectStore(\"history\");\r\n        }\r\n        resolve();\r\n      }\r\n      openDB.onerror = () => {\r\n        reject(new Error(\"Error while open IndexedDB\"));\r\n      }\r\n      openDB.onsuccess = () => {\r\n        this.db = openDB.result;\r\n        resolve();\r\n      }\r\n    });\r\n  }\r\n  updateDatabase = (historyItems) => {\r\n    if(!this.db){\r\n      console.log(\"IndexedDB didn't open\");\r\n      return;\r\n    }\r\n    const transaction = this.db.transaction(\"history\", \"readwrite\");\r\n    const history = transaction.objectStore(\"history\");\r\n    history.clear();\r\n    historyItems.forEach((item, index) => {\r\n      history.put(JSON.stringify(item), index);\r\n    });\r\n  }\r\n  getHistory = () => {\r\n    return new Promise((resolve, reject) => {\r\n      if(!this.db){\r\n        reject(new Error(\"IndexedDB didn't open\"));\r\n      }\r\n      const transaction = this.db.transaction(\"history\");\r\n      const history = transaction.objectStore(\"history\");\r\n      let request = history.getAll();\r\n      request.onsuccess = () => {\r\n        resolve(request.result);\r\n      }\r\n      request.onerror = () => {\r\n        reject(new Error(\"Can't get history data from IndexedDB\"));\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nexport const indexedDatabase = new IndexedDatabase();\r\n","import { createSlice } from '@reduxjs/toolkit';\r\nimport isEqual from './isEqualObject';\r\nimport { indexedDatabase } from './indexedDBConnector';\r\n\r\nconst maxRequestsCount = 20;\r\n\r\nconst checkDuplicateItem = (historyItems, historyItem) => {\r\n  let index = historyItems.findIndex((item) => isEqual(item.request,historyItem.request));\r\n  if(index < 0){\r\n    historyItems.push(historyItem);\r\n  }else{\r\n    historyItems[index].timestamp = historyItem.timestamp;\r\n  }\r\n}\r\n\r\nconst checkMaxSize = (historyItems) => {\r\n  let overCount = historyItems.length - maxRequestsCount;\r\n  if(overCount > 0) historyItems.splice(maxRequestsCount,overCount);\r\n}\r\n\r\nconst sortItems = (historyItems) => {\r\n  historyItems.sort((a,b) => a.timestamp > b.timestamp ? -1 : 1);\r\n}\r\n\r\nconst updateHistoryItems = (state, action, successStatus) => {\r\n  let historyItem = {request: action.payload.request, status:successStatus, timestamp:Date.now()};\r\n  let historyItems = state.historyItems;\r\n  checkDuplicateItem(historyItems, historyItem);\r\n  sortItems(historyItems);\r\n  checkMaxSize(historyItems);\r\n  indexedDatabase.updateDatabase(historyItems);\r\n  return historyItems;\r\n}\r\n\r\nexport const historySlice = createSlice({\r\n  name: 'history',\r\n  initialState: {\r\n    historyItems: [],\r\n    popupedItem: null,\r\n    copyAnimatedItem: null,\r\n  },\r\n  reducers: {\r\n    addSuccessHistoryItem: (state, action) => {\r\n      state.historyItems = updateHistoryItems(state, action, \"success\");\r\n    },\r\n    addFailHistoryItem: (state, action) => {\r\n      state.historyItems = updateHistoryItems(state, action, \"fail\");\r\n    },\r\n    setHistory: (state, action) => {\r\n      state.historyItems = [];\r\n      action.payload.history.forEach((item) => {\r\n        try{\r\n          state.historyItems.push(JSON.parse(item));\r\n        }catch(err){\r\n          console.log(\"Database corrupted\");\r\n        }\r\n      });\r\n    },\r\n    removeHistoryItem: (state, action) => {\r\n      state.historyItems.splice(action.payload.deleteItemIndex,1);\r\n      indexedDatabase.updateDatabase(state.historyItems);\r\n    },\r\n    clearHistory: state => {\r\n      state.historyItems = [];\r\n      indexedDatabase.updateDatabase(state.historyItems);\r\n    },\r\n    openPopup: (state, action) => {\r\n      state.popupedItem = parseInt(action.payload.popupedItem.slice(13));\r\n    },\r\n    closePopup: state => {\r\n      state.popupedItem = null;\r\n    },\r\n    setCopyAnimatedItem: (state, action) => {\r\n      state.copyAnimatedItem = action.payload.copyAnimatedItem;\r\n    },\r\n    resetCopyAnimatedItem: state => {\r\n      state.copyAnimatedItem = null;\r\n    },\r\n  },\r\n});\r\n\r\nexport const restoreHistory = () => (dispatch) => {\r\n  (async () => {\r\n    try{\r\n      await indexedDatabase.openDatabase();\r\n      const history = await indexedDatabase.getHistory();\r\n      dispatch(setHistory({history: history}));\r\n    }catch(err){\r\n      console.log(\"error: \",err);\r\n    }\r\n  })();\r\n}\r\n\r\nexport const resetCopyAnimated = () => (dispatch) => {\r\n  setTimeout(() => dispatch(resetCopyAnimatedItem()), 2000);\r\n}\r\n\r\nexport const { addSuccessHistoryItem, addFailHistoryItem, setHistory, removeHistoryItem, clearHistory,\r\n               openPopup, closePopup, setCopyAnimatedItem, resetCopyAnimatedItem } = historySlice.actions;\r\n\r\nexport default historySlice.reducer;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\nimport { removeHistoryItem, clearHistory } from '../history/historySlice';\r\n\r\nexport const confirmSlice = createSlice({\r\n  name: 'confirm',\r\n  initialState: {\r\n    showConfirm: false,\r\n    confirmCaption: \"\",\r\n    confirmApplyAction: null,\r\n    confirmParams: null,\r\n    tst: null,\r\n  },\r\n  reducers: {\r\n    openConfirm: (state, action) => {\r\n      const {confirmCaption, confirmApplyAction, confirmParams} = action.payload;\r\n      state.confirmCaption = confirmCaption;\r\n      state.confirmApplyAction = confirmApplyAction;\r\n      state.confirmParams = confirmParams;\r\n      state.showConfirm = true;\r\n    },\r\n    closeConfirm: state => {\r\n      state.showConfirm = false;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { openConfirm, closeConfirm } = confirmSlice.actions;\r\n\r\nexport const executeAction = (confirmApplyAction, confirmParams) => (dispatch) => {\r\n  switch (confirmApplyAction) {\r\n    case \"removeHistoryItem\":\r\n      dispatch(removeHistoryItem({deleteItemIndex: confirmParams}));\r\n      break;\r\n    case \"clearHistory\":\r\n      dispatch(clearHistory());\r\n      break;\r\n    default:\r\n  }\r\n}\r\n\r\nexport default confirmSlice.reducer;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const fullscreenSlice = createSlice({\r\n  name: 'fullscreen',\r\n  initialState: {\r\n    fullscreenTrigger: false,\r\n    fullscreen: false,\r\n  },\r\n  reducers: {\r\n    setFullscreenTrigger: state => {\r\n      state.fullscreenTrigger = true;\r\n    },\r\n    resetFullscreenTrigger: state => {\r\n      state.fullscreenTrigger = false;\r\n    },\r\n    setFullscreen: (state, action) => {\r\n      state.fullscreen = action.payload.fullscreen;\r\n    }\r\n  },\r\n});\r\n\r\nexport const { setFullscreenTrigger, resetFullscreenTrigger, setFullscreen } = fullscreenSlice.actions;\r\n\r\nexport default fullscreenSlice.reducer;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\nimport { logout } from '../auth/authSlice';\r\nimport { addSuccessHistoryItem, addFailHistoryItem } from '../history/historySlice';\r\nimport { sendsayConnector } from '../sendsayconnector/sendsayconnector.js'\r\n\r\nsendsayConnector.setSession(localStorage.getItem(\"sendsay_session\"));\r\n\r\nconst formatJSON = (requestStr) => {\r\n  let obj = JSON.parse(requestStr);\r\n  return JSON.stringify(obj, null, \" \");\r\n}\r\n\r\nexport const requestsSlice = createSlice({\r\n  name: 'requests',\r\n  initialState: {\r\n    requestStr: \"\",\r\n    responseStr: \"\",\r\n    process: 'none',\r\n  },\r\n  reducers: {\r\n    setRequestStr: (state, action) => {\r\n      state.process = \"none\";\r\n      state.requestStr = action.payload.requestStr;\r\n    },\r\n    setResponseStr: (state, action) => {\r\n      let value = JSON.stringify(action.payload.responseObj, null, \" \");\r\n      state.responseStr = (value === '\"\"') ? \"\" : value;\r\n    },\r\n    clearRequests: state => {\r\n      state.requestStr = \"\";\r\n      state.responseStr = \"\";\r\n    },\r\n    setProcessState: (state, action) => {\r\n      state.process = action.payload.process;\r\n    },\r\n    formatRequest: state => {\r\n      try{\r\n        state.requestStr = formatJSON(state.requestStr);\r\n      }catch(err){\r\n        state.process = \"invalidrequest\";\r\n      }\r\n    },\r\n  },\r\n});\r\n\r\nexport const { setRequestStr, setResponseStr, clearRequests, setProcessState, formatRequest } = requestsSlice.actions;\r\n\r\nexport const sendRequest = (requestStr) => dispatch => {\r\n  (async (requestStr) => {\r\n    dispatch(setProcessState({process:'waiting'}));\r\n    let obj = {};\r\n    try{\r\n      obj = JSON.parse(requestStr);\r\n      if(!obj.action) throw new Error(\"action missed\");\r\n    }catch(err){\r\n      dispatch(setProcessState({process:'invalidrequest'}));\r\n      return;\r\n    }\r\n    try{\r\n      let res = await sendsayConnector.request(obj);\r\n      dispatch(setResponseStr({responseObj:res}));\r\n      dispatch(setProcessState({process:'none'}));\r\n      dispatch(addSuccessHistoryItem({request:obj}));\r\n    }catch(err){\r\n      if(err.id === \"error/auth/failed\"){\r\n        dispatch(setProcessState({process:'none'}));\r\n        dispatch(clearRequests());\r\n        dispatch(logout());  //session expired\r\n      }else if(err.message){\r\n        dispatch(setResponseStr({responseObj:{error:err.message}}));\r\n        dispatch(setProcessState({process:'invalidresponse'}));\r\n      }else{\r\n        dispatch(setResponseStr({responseObj:err}));\r\n        dispatch(setProcessState({process:'invalidresponse'}));\r\n        dispatch(addFailHistoryItem({request:obj}));\r\n      }\r\n    }\r\n  })(requestStr);\r\n};\r\n\r\nexport default requestsSlice.reducer;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport './CurrentAccount.css'\r\nconst CurrentAccount = props => {\r\n\r\n  const subloginSeparatorHide = (props.currentSubLoginName === \"\") ? \"current-account__separator_hide\" : \"\";\r\n\r\n  return(\r\n    <div className=\"current-account\">\r\n      <div className=\"current-account__border\">\r\n        <span className=\"current-account__login\">{props.currentLoginName}</span>\r\n        <span className={`current-account__separator ${subloginSeparatorHide}`}> : </span>\r\n        <span className=\"current-account__sublogin\">{props.currentSubLoginName}</span>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  const { currentLoginName, currentSubLoginName } = state.auth;\r\n  return { currentLoginName, currentSubLoginName };\r\n}\r\n\r\nexport default connect(mapStateToProps)(CurrentAccount);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { logout } from '../auth/authSlice';\r\nimport { clearRequests } from '../requests/requestsSlice';\r\nimport { setFullscreenTrigger, setFullscreen } from '../fullscreen/fullscreenSlice';\r\n\r\nimport CurrentAccount from './CurrentAccount'\r\nimport './Header.css';\r\n\r\nconst Header = props => {\r\n\r\n  const fullscreenClass = props.fullscreen ? \"fullscreen-button_off\" : \"\";\r\n\r\n  const onLogoutHandle = () => {\r\n    props.clearRequests();\r\n    props.logout();\r\n  }\r\n\r\n  const fullscreenButtonHandle = () => {\r\n    props.setFullscreenTrigger();\r\n  }\r\n\r\n  document.onfullscreenchange = function ( event ) {\r\n    props.setFullscreen({fullscreen: document.fullscreen});\r\n  };\r\n\r\n  return(\r\n    <div className=\"header\">\r\n      <div className=\"app-logo\"></div>\r\n      <div className=\"container\">\r\n        <div className=\"app-caption\">API-консолька</div>\r\n        <div className=\"dummy\"></div>\r\n        <CurrentAccount/>\r\n        <input className=\"logout-button\"\r\n          type=\"button\"\r\n          onClick={onLogoutHandle}\r\n          value=\"Выйти\">\r\n        </input>\r\n        <button className={`fullscreen-button ${fullscreenClass}`} onClick={fullscreenButtonHandle}/>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  const fullscreen = state.fullscreen.fullscreen;\r\n  return { fullscreen };\r\n}\r\n\r\nexport default connect(mapStateToProps, {logout, clearRequests, setFullscreenTrigger, setFullscreen })(Header);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { setRequestStr } from '../requests/requestsSlice';\r\nimport { openPopup } from '../history/historySlice';\r\nimport './HistoryItem.css';\r\n\r\nconst HistoryItem = props => {\r\n\r\n  const copyAnimateClass = props.copyAnimatedItem === props.itemIndex ? \"_show\" : \"\";\r\n\r\n  const onHistoryItemClickHandle = () => {\r\n    props.setRequestStr({requestStr: JSON.stringify(props.item.request, null, \" \")});\r\n  }\r\n\r\n  const onPopupItemClickHandle = (e) => {\r\n    props.openPopup({popupedItem: e.target.id});\r\n    e.stopPropagation();\r\n  }\r\n\r\n  return(\r\n    <button className=\"history-request\" onClick={onHistoryItemClickHandle} id={`history-item${props.itemIndex}`}>\r\n      <div className={`history-request__status history-request__status_${props.item.status}`}></div>\r\n      <div className=\"history-request__title\">{props.item.request.action}\r\n        <div className={`history-request__copy-animate${copyAnimateClass}`}>Скопировано</div>\r\n      </div>\r\n      <div className=\"history-request__popup-link\" onClick={onPopupItemClickHandle} id={`history-popup${props.itemIndex}`}></div>\r\n    </button>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  const copyAnimatedItem = state.history.copyAnimatedItem;\r\n  return {copyAnimatedItem}\r\n}\r\n\r\nexport default connect(mapStateToProps, {setRequestStr, openPopup})(HistoryItem);\r\n","import React, {useEffect} from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { restoreHistory } from '../history/historySlice';\r\nimport { openConfirm } from '../confirm/confirmSlice';\r\nimport HistoryItem from './HistoryItem';\r\nimport './History.css';\r\n\r\nconst History = props => {\r\n\r\n  useEffect(() =>{\r\n    props.restoreHistory();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  const scrollHorizontally = (e) => {\r\n    e = window.event || e;\r\n    let delta = Math.max(-1, Math.min(1, (e.wheelDelta || -e.detail)));\r\n    document.getElementById('historyItemsContainer').scrollLeft -= (delta*40);\r\n  }\r\n\r\n  const historyClearClickHandler = (e) => {\r\n    props.openConfirm({confirmCaption: \"Очистить историю?\",\r\n                       confirmApplyAction: \"clearHistory\"});\r\n    e.stopPropagation();\r\n  }\r\n\r\n  return(\r\n    <div className=\"history\">\r\n      <div className=\"history-items\" id=\"historyItemsContainer\" onWheel={scrollHorizontally}>\r\n        {props.historyItems.map((item,index) =>\r\n          (<HistoryItem key={index} itemIndex={index} item={item}/>)\r\n        )}\r\n        <div className=\"dummy-request\"></div>\r\n      </div>\r\n      <div className=\"history-clear-container\">\r\n        <button className=\"history-clear\" onClick={historyClearClickHandler}/>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  const historyItems = state.history.historyItems;\r\n  return {historyItems}\r\n}\r\n\r\nexport default connect(mapStateToProps, {restoreHistory, openConfirm})(History);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { setRequestStr } from '../requests/requestsSlice';\r\nimport './TextMemo.css';\r\n\r\nconst TextMemo = props => {\r\n  const textMemoProps = props.type === \"request\"?\r\n  {\r\n    sideClass: \"textmemo_left\",\r\n    caption  : \"Запрос:\",\r\n    readOnly : false,\r\n  }:{\r\n    sideClass: \"textmemo_right\",\r\n    caption  : \"Ответ:\",\r\n    readOnly : true,\r\n  };\r\n\r\n  let viewerClass = \"\";\r\n  let captionClass = \"\";\r\n  if(((props.type === \"request\")  && (props.process === \"invalidrequest\")) ||\r\n     ((props.type === \"response\") && (props.process === \"invalidresponse\"))){\r\n    viewerClass = \"textmemo__viewer_invalid\";\r\n    captionClass = \"textmemo__caption_invalid\";\r\n  }\r\n\r\n  let currentRequest = \"\";\r\n  const onRequestChange = (e) => {\r\n    currentRequest = e.target.value;\r\n    if(!e.target.readOnly) props.setRequestStr({requestStr:e.target.value});\r\n  }\r\n\r\n  const getValue = () => {\r\n    if(props.type === \"request\"){\r\n      return (props.requestStr === currentRequest) ? undefined : props.requestStr;\r\n    }\r\n    return props.responseStr;\r\n  }\r\n\r\n  return(\r\n    <div className={`textmemo ${textMemoProps.sideClass}`}>\r\n      <div className={`textmemo__caption ${captionClass}`}>{textMemoProps.caption}</div>\r\n      <textarea\r\n        className={`textmemo__viewer ${viewerClass}`}\r\n        readOnly={textMemoProps.readOnly}\r\n        onChange={onRequestChange}\r\n        value={getValue()}>\r\n      </textarea>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  const { requestStr, responseStr, process } = state.requests;\r\n  return { requestStr, responseStr, process };\r\n}\r\n\r\nexport default connect(mapStateToProps,{setRequestStr})(TextMemo);\r\n","import React from 'react';\r\nimport SplitterLayout from 'react-splitter-layout';\r\nimport 'react-splitter-layout/lib/index.css';\r\nimport './Viewer.css';\r\nimport TextMemo from './TextMemo';\r\n\r\nconst minPaneSizePercent = 20;\r\n\r\nconst Viewer = () => {\r\n  return(\r\n    <SplitterLayout percentage={true} primaryMinSize={minPaneSizePercent} secondaryMinSize={minPaneSizePercent}>\r\n      <TextMemo type=\"request\"/>\r\n      <TextMemo type=\"response\"/>\r\n    </SplitterLayout>\r\n  )\r\n}\r\n\r\nexport default Viewer;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { sendRequest, formatRequest } from '../requests/requestsSlice';\r\nimport './Footer.css';\r\n\r\nconst Footer = props => {\r\n\r\n  const requestButtonStateClass = props.process === \"waiting\" ? \"request-button_waiting\" : \"\";\r\n\r\n  const onRequestHandle = () => {\r\n    props.sendRequest(props.requestStr);\r\n  }\r\n\r\n  const onFormatHandle = () => {\r\n    props.formatRequest();\r\n  }\r\n\r\n  return(\r\n    <div className=\"footer\">\r\n        <div className=\"footer-container\">\r\n          <div className=\"request-button-container\">\r\n            <button\r\n              className={`request-button ${requestButtonStateClass}`}\r\n              type=\"button\"\r\n              onClick={onRequestHandle}\r\n              data-testid=\"requestButton\"\r\n              disabled={props.process === \"waiting\"}\r\n              >\r\n              Отправить\r\n            </button>\r\n          </div>\r\n          <div className=\"github-link-container\">\r\n            <a className=\"github-link github-link-footer\" href={props.ghLink}>@my-github-link</a>\r\n          </div>\r\n          <div className=\"format-button-container\">\r\n            <input\r\n              className=\"format-button\"\r\n              type=\"button\"\r\n              onClick={onFormatHandle}\r\n              data-testid=\"formatButton\"\r\n              value=\"Форматировать\"\r\n              >\r\n            </input>\r\n          </div>\r\n        </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  const { requestStr, process } = state.requests;\r\n  return { requestStr, process }\r\n}\r\n\r\nexport default connect(mapStateToProps,{sendRequest,formatRequest})(Footer);\r\n","import React from 'react';\r\nimport { setRequestStr, sendRequest } from '../requests/requestsSlice';\r\nimport { setCopyAnimatedItem, resetCopyAnimated, removeHistoryItem, closePopup } from '../history/historySlice';\r\nimport { openConfirm } from '../confirm/confirmSlice';\r\nimport { connect } from 'react-redux';\r\nimport './Popup.css';\r\n\r\nconst Popup = props => {\r\n\r\n  const popupWidth = 120;\r\n  const popupClass = props.popupedItem === null ? \"popup_hide\" : \"\";\r\n\r\n  const getRequestStr = () => {\r\n    let item = props.historyItems[props.popupedItem];\r\n    return item ? JSON.stringify(item.request, null, \" \") : null;\r\n  }\r\n  const onExecClickHandle = () => {\r\n    let requestStr = getRequestStr();\r\n    props.setRequestStr({requestStr: requestStr});\r\n    props.sendRequest(requestStr);\r\n  }\r\n  const onCopyClickHandle = async() => {\r\n    await navigator.clipboard.writeText(getRequestStr());\r\n    props.setCopyAnimatedItem({copyAnimatedItem:props.popupedItem});\r\n    props.resetCopyAnimated();\r\n  }\r\n  const onDeleteClickHandle = (e) => {\r\n    props.closePopup();\r\n    props.openConfirm({confirmCaption: \"Удалить запись?\",\r\n                       confirmApplyAction: \"removeHistoryItem\",\r\n                       confirmParams: props.popupedItem});\r\n    e.stopPropagation();\r\n  }\r\n\r\n  const getLeft = () => {\r\n    let historyItem = document.getElementById(\"history-item\" + props.popupedItem);\r\n    if(historyItem){\r\n      let viewportOffset = historyItem.getBoundingClientRect();\r\n      let popupX = viewportOffset.right - popupWidth;\r\n      return popupX>0 ? popupX + \"px\" : \"8px\";\r\n    }else{\r\n      return \"0px\";\r\n    }\r\n\r\n  }\r\n\r\n  return(\r\n    <div className={`popup ${popupClass}`} style={{left: getLeft(), width: popupWidth}}>\r\n      <div className=\"popup__exec\" onClick={onExecClickHandle}>Выполнить</div>\r\n      <div className=\"popup__copy\" onClick={onCopyClickHandle}>Скопировать</div>\r\n      <hr/>\r\n      <div className=\"popup__delete\" onClick={onDeleteClickHandle}>Удалить</div>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  const { popupedItem, historyItems } = state.history;\r\n  return { popupedItem, historyItems };\r\n}\r\n\r\nexport default connect(mapStateToProps, { setRequestStr, sendRequest, setCopyAnimatedItem, closePopup,\r\n                                          resetCopyAnimated, removeHistoryItem, openConfirm })(Popup);\r\n","import React, { useEffect } from 'react';\r\nimport { removeHistoryItem } from '../history/historySlice';\r\nimport { executeAction } from '../confirm/confirmSlice';\r\nimport { connect } from 'react-redux';\r\nimport './ConfirmDialog.css';\r\n\r\nconst ConfirmDialog = props => {\r\n\r\n  useEffect(() => {\r\n    let buttonYes = document.getElementById(\"button-yes\");\r\n    if(buttonYes) buttonYes.focus();\r\n  });\r\n\r\n  const buttonYesClickHandle = () => {\r\n    props.executeAction(props.confirmApplyAction, props.confirmParams);\r\n  }\r\n\r\n  const confirmDialogClass = props.showConfirm ? \"\" : \"confirm-dialog_hide\";\r\n  return(\r\n    <div className={`confirm-dialog ${confirmDialogClass}`}>\r\n      <div className=\"confirm-dialog__header\">{props.confirmCaption}</div>\r\n      <div className=\"confirm-dialog__buttons\">\r\n        <button className=\"confirm-dialog__button-yes\" id=\"button-yes\" onClick={buttonYesClickHandle}>Да</button>\r\n        <button className=\"confirm-dialog__button-no\">Нет</button>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  const {showConfirm, confirmCaption, confirmApplyAction, confirmParams} = state.confirm;\r\n  return {showConfirm, confirmCaption, confirmApplyAction, confirmParams}\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps, { removeHistoryItem, executeAction })(ConfirmDialog);\r\n","import React, { useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { closePopup } from '../history/historySlice';\r\nimport { closeConfirm } from '../confirm/confirmSlice';\r\nimport { resetFullscreenTrigger } from '../fullscreen/fullscreenSlice';\r\nimport './MainForm.css';\r\nimport Header from './Header';\r\nimport History from './History';\r\nimport Viewer from './Viewer';\r\nimport Footer from './Footer';\r\nimport Popup from './Popup';\r\nimport ConfirmDialog from './ConfirmDialog';\r\n\r\nconst MainForm = props => {\r\n\r\n  useEffect(() => {\r\n    if(props.fullscreenTrigger){\r\n      if(document.fullscreen){\r\n        closeFullscreen();\r\n      }else{\r\n        openFullScreen();\r\n      }\r\n      props.resetFullscreenTrigger();\r\n    }\r\n  });\r\n\r\n  const onMainformClickHandler = () => {\r\n    props.closePopup();\r\n    props.closeConfirm();\r\n  }\r\n\r\n  const onMainformKeyDownHandler = (e) => {\r\n    if(e.key === \"Escape\"){\r\n      props.closePopup();\r\n      props.closeConfirm();\r\n    }\r\n  }\r\n\r\n  const onMainformWheelHandler = () => {\r\n    props.closePopup();\r\n  }\r\n\r\n  const openFullScreen = () => {\r\n    let elem = document.documentElement;\r\n    if(elem.requestFullscreen) {\r\n      elem.requestFullscreen();\r\n    }else if(elem.webkitRequestFullscreen){ /* Safari */\r\n      elem.webkitRequestFullscreen();\r\n    }else if(elem.msRequestFullscreen){ /* IE11 */\r\n      elem.msRequestFullscreen();\r\n    }\r\n  }\r\n\r\n  const closeFullscreen = () => {\r\n    if (!document.fullscreen) return;\r\n    if(document.exitFullscreen){\r\n      document.exitFullscreen();\r\n    }else if(document.webkitExitFullscreen){ /* Safari */\r\n      document.webkitExitFullscreen();\r\n    }else if(document.msExitFullscreen){ /* IE11 */\r\n      document.msExitFullscreen();\r\n    }\r\n  }\r\n\r\n  return(\r\n    <div className=\"mainform\" onClick={onMainformClickHandler} onKeyDown={onMainformKeyDownHandler} onWheel={onMainformWheelHandler}>\r\n      <Header/>\r\n      <History/>\r\n      <Viewer/>\r\n      <Footer ghLink={props.ghLink}/>\r\n      <Popup/>\r\n      <ConfirmDialog/>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  const { currentLoginName, currentSubLoginName } = state.auth;\r\n  const fullscreenTrigger = state.fullscreen.fullscreenTrigger;\r\n  return { currentLoginName, currentSubLoginName, fullscreenTrigger };\r\n}\r\n\r\nexport default connect(mapStateToProps, { closePopup, closeConfirm, resetFullscreenTrigger })(MainForm);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect, BrowserRouter } from 'react-router-dom';\r\n\r\n\r\nconst AppRoute = (props) => {\r\n    const {type, currentLoginName} = props;\r\n    if((type === \"user\") && !currentLoginName){\r\n      return(<Redirect to=\"/login\"/>);\r\n    }\r\n    if((type === \"guest\") && currentLoginName){\r\n      return(<Redirect to=\"/\"/>);\r\n    }\r\n    return(<BrowserRouter {...props}/>)\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  const currentLoginName=state.auth.currentLoginName;\r\n  return {currentLoginName};\r\n}\r\n\r\nexport default connect(mapStateToProps)(AppRoute)\r\n","import React from 'react';\r\nimport { Switch } from 'react-router'\r\nimport './App.css';\r\nimport LoginForm from './features/loginform/LoginForm';\r\nimport MainForm from './features/mainform/MainForm';\r\nimport AppRoute from './AppRoute';\r\n\r\nfunction App() {\r\n  const gitHubLink=\"https://github.com/maxmaxk/sendsay\";\r\n  return (\r\n    <div className=\"App\">\r\n      <Switch>\r\n        <AppRoute path=\"/login\" type=\"guest\">\r\n          <LoginForm ghLink={gitHubLink}/>\r\n        </AppRoute>\r\n        <AppRoute path=\"/\" type=\"user\">\r\n          <MainForm ghLink={gitHubLink}/>\r\n        </AppRoute>\r\n      </Switch>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport authReducer from '../features/auth/authSlice';\r\nimport requestsReducer from '../features/requests/requestsSlice';\r\nimport historyReducer from '../features/history/historySlice';\r\nimport confirmReducer from '../features/confirm/confirmSlice';\r\nimport fullscreenReducer from '../features/fullscreen/fullscreenSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    auth: authReducer,\r\n    requests: requestsReducer,\r\n    history: historyReducer,\r\n    confirm: confirmReducer,\r\n    fullscreen: fullscreenReducer,\r\n  },\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {BrowserRouter} from 'react-router-dom';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <BrowserRouter>\r\n        <App />\r\n      </BrowserRouter>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}